{
  "info": {
    "name": "NextProperty AI - API Collection",
    "description": "Comprehensive API collection for NextProperty AI real estate platform with AI-powered property valuations and market analysis",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5007",
      "type": "string",
      "description": "Base URL for the NextProperty AI API"
    },
    {
      "key": "api_base",
      "value": "{{base_url}}/api",
      "type": "string",
      "description": "API base URL"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string",
      "description": "JWT authentication token (when implemented)"
    },
    {
      "key": "test_listing_id",
      "value": "NP12345678",
      "type": "string",
      "description": "Test listing ID for property-specific requests"
    }
  ],
  "item": [
    {
      "name": "Main Routes",
      "description": "Public website routes and pages",
      "item": [
        {
          "name": "Get Homepage",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            },
            "description": "Homepage with featured properties and market overview"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains HTML content', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test('Page loads within acceptable time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Properties Page",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/properties?city=Toronto&type=Detached&page=1",
              "host": ["{{base_url}}"],
              "path": ["properties"],
              "query": [
                {
                  "key": "city",
                  "value": "Toronto",
                  "description": "Filter by city"
                },
                {
                  "key": "type",
                  "value": "Detached",
                  "description": "Property type filter"
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                }
              ]
            },
            "description": "Property listings page with search and filter capabilities"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Properties page loads correctly', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Property Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/property/{{test_listing_id}}",
              "host": ["{{base_url}}"],
              "path": ["property", "{{test_listing_id}}"]
            },
            "description": "Individual property details page"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Property page loads correctly', function () {",
                  "        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Property API",
      "description": "Core property endpoints for listings, details, and management",
      "item": [
        {
          "name": "Get All Properties",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/properties?page=1&per_page=10&city=Toronto",
              "host": ["{{api_base}}"],
              "path": ["properties"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "per_page",
                  "value": "10",
                  "description": "Items per page"
                },
                {
                  "key": "city",
                  "value": "Toronto",
                  "description": "Filter by city"
                }
              ]
            },
            "description": "Get paginated list of properties with optional filters"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});",
                  "",
                  "pm.test('Response contains properties array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.success) {",
                  "        pm.expect(jsonData).to.have.property('properties');",
                  "        pm.expect(jsonData.properties).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Pagination data is present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.properties.length > 0) {",
                  "        pm.expect(jsonData).to.have.property('pagination');",
                  "        pm.expect(jsonData.pagination).to.have.property('page');",
                  "        pm.expect(jsonData.pagination).to.have.property('per_page');",
                  "        pm.expect(jsonData.pagination).to.have.property('total');",
                  "    }",
                  "});",
                  "",
                  "// Store first property ID for use in other tests",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.success && jsonData.properties && jsonData.properties.length > 0) {",
                  "    pm.collectionVariables.set('test_listing_id', jsonData.properties[0].listing_id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Property by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/properties/{{test_listing_id}}",
              "host": ["{{api_base}}"],
              "path": ["properties", "{{test_listing_id}}"]
            },
            "description": "Get detailed information for a specific property"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Property data contains required fields', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success', true);",
                  "        pm.expect(jsonData).to.have.property('property');",
                  "        ",
                  "        const property = jsonData.property;",
                  "        pm.expect(property).to.have.property('listing_id');",
                  "        pm.expect(property).to.have.property('address');",
                  "        pm.expect(property).to.have.property('city');",
                  "        pm.expect(property).to.have.property('price');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Property Photos",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/properties/{{test_listing_id}}/photos",
              "host": ["{{api_base}}"],
              "path": ["properties", "{{test_listing_id}}", "photos"]
            },
            "description": "Get all photos for a specific property"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Photos data is valid', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success', true);",
                  "        pm.expect(jsonData).to.have.property('photos');",
                  "        pm.expect(jsonData.photos).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Property Rooms",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/properties/{{test_listing_id}}/rooms",
              "host": ["{{api_base}}"],
              "path": ["properties", "{{test_listing_id}}", "rooms"]
            },
            "description": "Get room details for a specific property"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Rooms data is valid', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success', true);",
                  "        pm.expect(jsonData).to.have.property('data');",
                  "        pm.expect(jsonData.data).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Analyze Property",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/properties/{{test_listing_id}}/analyze",
              "host": ["{{api_base}}"],
              "path": ["properties", "{{test_listing_id}}", "analyze"]
            },
            "description": "Generate AI analysis for a specific property"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('AI analysis contains required data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success', true);",
                  "        pm.expect(jsonData).to.have.property('data');",
                  "        ",
                  "        const analysis = jsonData.data.analysis;",
                  "        pm.expect(analysis).to.have.property('predicted_price');",
                  "        pm.expect(analysis).to.have.property('confidence');",
                  "        pm.expect(analysis).to.have.property('investment_score');",
                  "        pm.expect(analysis.predicted_price).to.be.a('number');",
                  "        pm.expect(analysis.confidence).to.be.a('number');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Map Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/properties/map-data?city=Toronto&limit=50",
              "host": ["{{api_base}}"],
              "path": ["properties", "map-data"],
              "query": [
                {
                  "key": "city",
                  "value": "Toronto",
                  "description": "Filter by city"
                },
                {
                  "key": "limit",
                  "value": "50",
                  "description": "Limit results for map display"
                }
              ]
            },
            "description": "Get property data optimized for map display"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Map data contains coordinates', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('properties');",
                  "    ",
                  "    if (jsonData.properties.length > 0) {",
                  "        const property = jsonData.properties[0];",
                  "        pm.expect(property).to.have.property('lat');",
                  "        pm.expect(property).to.have.property('lng');",
                  "        pm.expect(property.lat).to.be.a('number');",
                  "        pm.expect(property.lng).to.be.a('number');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Bulk AI Analysis",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/properties/bulk-analyze",
              "host": ["{{api_base}}"],
              "path": ["properties", "bulk-analyze"]
            },
            "description": "Trigger bulk AI analysis for multiple properties"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bulk analysis response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('analyzed_count');",
                  "    pm.expect(jsonData).to.have.property('total_processed');",
                  "    pm.expect(jsonData.analyzed_count).to.be.a('number');",
                  "    pm.expect(jsonData.total_processed).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Search & Discovery",
      "description": "Property search, filtering, and discovery endpoints",
      "item": [
        {
          "name": "Advanced Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/search?q=downtown&city=Toronto&min_price=500000&max_price=1000000&bedrooms=3&bathrooms=2&page=1&per_page=10",
              "host": ["{{api_base}}"],
              "path": ["search"],
              "query": [
                {
                  "key": "q",
                  "value": "downtown",
                  "description": "Text search query"
                },
                {
                  "key": "city",
                  "value": "Toronto",
                  "description": "City filter"
                },
                {
                  "key": "min_price",
                  "value": "500000",
                  "description": "Minimum price"
                },
                {
                  "key": "max_price",
                  "value": "1000000",
                  "description": "Maximum price"
                },
                {
                  "key": "bedrooms",
                  "value": "3",
                  "description": "Number of bedrooms"
                },
                {
                  "key": "bathrooms",
                  "value": "2",
                  "description": "Number of bathrooms"
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "per_page",
                  "value": "10",
                  "description": "Results per page"
                }
              ]
            },
            "description": "Advanced property search with multiple filters"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain search params', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('search_params');",
                  "    pm.expect(jsonData.search_params).to.have.property('q');",
                  "    pm.expect(jsonData.search_params).to.have.property('city');",
                  "});",
                  "",
                  "pm.test('Search results are within price range', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.properties && jsonData.properties.length > 0) {",
                  "        jsonData.properties.forEach(property => {",
                  "            pm.expect(property.price).to.be.at.least(500000);",
                  "            pm.expect(property.price).to.be.at.most(1000000);",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Geospatial Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/search/geospatial?lat=43.7532&lng=-79.3832&radius=5",
              "host": ["{{api_base}}"],
              "path": ["search", "geospatial"],
              "query": [
                {
                  "key": "lat",
                  "value": "43.7532",
                  "description": "Latitude coordinate"
                },
                {
                  "key": "lng",
                  "value": "-79.3832",
                  "description": "Longitude coordinate"
                },
                {
                  "key": "radius",
                  "value": "5",
                  "description": "Search radius in km"
                }
              ]
            },
            "description": "Location-based property search using coordinates"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Geospatial search includes center coordinates', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('search_center');",
                  "    pm.expect(jsonData.search_center).to.have.property('latitude');",
                  "    pm.expect(jsonData.search_center).to.have.property('longitude');",
                  "    pm.expect(jsonData.search_center).to.have.property('radius_km');",
                  "});",
                  "",
                  "pm.test('Properties have location data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.data && jsonData.data.length > 0) {",
                  "        jsonData.data.forEach(property => {",
                  "            pm.expect(property).to.have.property('lat');",
                  "            pm.expect(property).to.have.property('lng');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Top Deals",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/top-deals?limit=20&city=Toronto&type=Detached",
              "host": ["{{api_base}}"],
              "path": ["top-deals"],
              "query": [
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of deals to return"
                },
                {
                  "key": "city",
                  "value": "Toronto",
                  "description": "Filter by city"
                },
                {
                  "key": "type",
                  "value": "Detached",
                  "description": "Property type filter"
                }
              ]
            },
            "description": "Get undervalued properties with high investment potential"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Top deals contain investment data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('deals');",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "    ",
                  "    if (jsonData.deals && jsonData.deals.length > 0) {",
                  "        const deal = jsonData.deals[0];",
                  "        pm.expect(deal).to.have.property('actual_price');",
                  "        pm.expect(deal).to.have.property('predicted_price');",
                  "        pm.expect(deal).to.have.property('value_difference');",
                  "        pm.expect(deal).to.have.property('investment_score');",
                  "        pm.expect(deal.value_difference).to.be.a('number');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "AI & Machine Learning",
      "description": "AI-powered prediction and analysis endpoints",
      "item": [
        {
          "name": "Predict Property Price",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bedrooms\": 3,\n  \"bathrooms\": 2.5,\n  \"square_feet\": 2000,\n  \"lot_size\": 0.25,\n  \"year_built\": 2015,\n  \"property_type\": \"Detached\",\n  \"city\": \"Toronto\",\n  \"province\": \"ON\",\n  \"postal_code\": \"M5V 3A8\",\n  \"dom\": 25,\n  \"taxes\": 8000\n}"
            },
            "url": {
              "raw": "{{api_base}}/property-prediction",
              "host": ["{{api_base}}"],
              "path": ["property-prediction"]
            },
            "description": "Generate AI-powered property price prediction"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Prediction contains required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('prediction');",
                  "    ",
                  "    const prediction = jsonData.prediction;",
                  "    pm.expect(prediction).to.have.property('predicted_price');",
                  "    pm.expect(prediction).to.have.property('confidence');",
                  "    pm.expect(prediction).to.have.property('confidence_interval');",
                  "    pm.expect(prediction).to.have.property('price_per_sqft');",
                  "});",
                  "",
                  "pm.test('Prediction values are valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const prediction = jsonData.prediction;",
                  "    ",
                  "    pm.expect(prediction.predicted_price).to.be.a('number');",
                  "    pm.expect(prediction.predicted_price).to.be.above(0);",
                  "    pm.expect(prediction.confidence).to.be.a('number');",
                  "    pm.expect(prediction.confidence).to.be.within(0, 1);",
                  "    pm.expect(prediction.price_per_sqft).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Confidence interval is logical', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const interval = jsonData.prediction.confidence_interval;",
                  "    ",
                  "    pm.expect(interval).to.have.property('lower');",
                  "    pm.expect(interval).to.have.property('upper');",
                  "    pm.expect(interval.lower).to.be.below(interval.upper);",
                  "    pm.expect(interval.lower).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Property Prediction",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/property-prediction/{{test_listing_id}}",
              "host": ["{{api_base}}"],
              "path": ["property-prediction", "{{test_listing_id}}"]
            },
            "description": "Get cached AI prediction for existing property"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Cached prediction is valid', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success', true);",
                  "        pm.expect(jsonData).to.have.property('prediction');",
                  "        pm.expect(jsonData.prediction).to.have.property('predicted_price');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Market Data",
      "description": "Market trends, statistics, and economic data endpoints",
      "item": [
        {
          "name": "Get Market Trends",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/market/trends?city=Toronto&type=Detached&months=12",
              "host": ["{{api_base}}"],
              "path": ["market", "trends"],
              "query": [
                {
                  "key": "city",
                  "value": "Toronto",
                  "description": "Filter by city"
                },
                {
                  "key": "type",
                  "value": "Detached",
                  "description": "Property type filter"
                },
                {
                  "key": "months",
                  "value": "12",
                  "description": "Historical period in months"
                }
              ]
            },
            "description": "Get market trends and historical data"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Market trends data is structured correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('price_trends');",
                  "    pm.expect(jsonData.data.price_trends).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Price trends contain valid data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.price_trends.length > 0) {",
                  "        const trend = jsonData.data.price_trends[0];",
                  "        pm.expect(trend).to.have.property('month');",
                  "        pm.expect(trend).to.have.property('avg_price');",
                  "        pm.expect(trend.avg_price).to.be.a('number');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Market Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/market/stats?city=Toronto",
              "host": ["{{api_base}}"],
              "path": ["market", "stats"],
              "query": [
                {
                  "key": "city",
                  "value": "Toronto",
                  "description": "Filter by city"
                }
              ]
            },
            "description": "Get current market statistics and KPIs"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Market stats contain key metrics', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('stats');",
                  "    ",
                  "    const stats = jsonData.stats;",
                  "    pm.expect(stats).to.have.property('total_properties');",
                  "    pm.expect(stats).to.have.property('avg_price');",
                  "    pm.expect(stats).to.have.property('median_price');",
                  "    pm.expect(stats.total_properties).to.be.a('number');",
                  "    pm.expect(stats.avg_price).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Economic Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{api_base}}/economic-data?latest=true",
              "host": ["{{api_base}}"],
              "path": ["economic-data"],
              "query": [
                {
                  "key": "latest",
                  "value": "true",
                  "description": "Get only latest data"
                }
              ]
            },
            "description": "Get economic indicators and market data"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Economic data is present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Economic indicators are valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        const indicator = jsonData.data[0];",
                  "        pm.expect(indicator).to.have.property('indicator_name');",
                  "        pm.expect(indicator).to.have.property('value');",
                  "        pm.expect(indicator).to.have.property('date');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Actions (Demo)",
      "description": "User-specific actions (currently in demo mode)",
      "item": [
        {
          "name": "Save Property",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"listing_id\": \"{{test_listing_id}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/save-property",
              "host": ["{{api_base}}"],
              "path": ["save-property"]
            },
            "description": "Save property to user's favorites (demo mode)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 (demo mode)', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Demo mode response is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('demo', true);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Saved Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{api_base}}/check-saved-status/{{test_listing_id}}",
              "host": ["{{api_base}}"],
              "path": ["check-saved-status", "{{test_listing_id}}"]
            },
            "description": "Check if property is saved by user (demo mode)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 (demo mode)', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Demo mode response is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('demo', true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Admin Endpoints (Demo)",
      "description": "Administrative endpoints (require admin authentication)",
      "item": [
        {
          "name": "Admin Dashboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/",
              "host": ["{{base_url}}"],
              "path": ["admin", ""]
            },
            "description": "Access admin dashboard (requires authentication)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 302 or 401 (redirect to login)', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([302, 401]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Bulk AI Analysis (Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"batch_size\": 50,\n  \"force_update\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/api/bulk-ai-analysis",
              "host": ["{{base_url}}"],
              "path": ["admin", "api", "bulk-ai-analysis"]
            },
            "description": "Trigger bulk AI analysis (admin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 or 403 (unauthorized)', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "System Health",
      "description": "System health and monitoring endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_base}}/health",
              "host": ["{{api_base}}"],
              "path": ["health"]
            },
            "description": "Basic health check endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check responds quickly', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health status is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set dynamic timestamps for requests",
          "pm.globals.set('timestamp', new Date().toISOString());",
          "",
          "// Log request details for debugging",
          "console.log('Making request to:', pm.request.url.toString());"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test for all requests",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000);",
          "});",
          "",
          "// Log response details for debugging",
          "console.log('Response status:', pm.response.status);",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ],
        "type": "text/javascript"
      }
    }
  ]
}
